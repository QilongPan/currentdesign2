2014级软件工程专业
《数据结构课程设计》方案V2.0
一、课程任务
要求独立完成一个或多个较为完整的应用需求分析，在完成设计和编程大型作业的过程中，深化对数据结构课程中概念、理论和方法的理解；训练综合运用所学知识处理实际问题的能力，强化面向对象的程序设计理念；使同学的程序设计与调试水平有一个明显的提高；经过查找参考资料、技术手册和撰写文档的实践，进一步培养软件工程师的综合素质。主要考察：
数据结构基本知识，包括基本的线性表、树、图等数据结构
典型数据结构的基本操作和算法实现、运用
Java编程基础
流、文件和输入输出操作
异常处理
图形用户界面的设计和编程实现
事件驱动编程
Applet和多媒体
程序打包发布

二、具体要求
1.每人应至少独立完成一道题目并撰写课程报告，具体题目由任课老师组织分配，题目一旦选定，未经老师同意，不得私自更换，否则总评成绩为缺成绩。
2.按时出勤，旷课2次直接取消答辩资格，旷课1次总评成绩降低1个等级。
3.听从值班老师安排，按所选题目分区坐在指定位置。
4.按时提交课程设计资料，未按格式或未在规定时间提交资料的，总评成绩为缺成绩。
5.每人完成指定的题目，每个题目有多个不同层次的要求，实现某一层次取得对应的分值。
6.代码遵守命名和缩进规则，关键代码需要注释说明。
7.提供相应的说明文档，主要包括功能分析、解决方案、主要步骤，如：采用的数据结构，实现的操作，采用的算法，包括类的主要变量和主要方法(用UML类图说明，标注类继承、组合和依赖关系)，以及输入输出方式等。
8.如能根据实际情况，分析题目要求中的不合理因素，设计出更合理、更有效或有创新性的解决方案并实现，可获得加分。

三、具体安排
1.集中设计时间：18周周1至周5上午
2.集中设计地点：
	周1	周2	周3	周4	周5
1、2班	4教209	4教209	4教312	4教209	4教209
3、4班	4教210	4教210	4教313	4教210	4教210

3.答辩时间：18周周5上午
4.课程设计具体考核标准和流程由题目指导老师负责。

四、课程设计题目与内容
题目1.数据压缩与解压缩 
[问题描述]
利用哈夫曼编码进行信息通讯可以大大提高信道利用率，缩短信息传输时间，降低传输成本。但是，这要求在发送端通过一个编码系统对待传数据预先编码；在接收端将传来的数据进行译码(复原)。对于双工信道 (即可以双向传输信息的信道)，每端都需要一个完整的编/译码系统。试对于任意的一段文本（可能是直接输入的，也可能是保存在本地文件中或者网络上的），写一个哈夫曼码的编译码系统。

[基本要求]
一个完整的系统应具有以下功能：
(l)I:初始化 (Initialization)。从终端读入字符集大小n，及n个字符和m个权值，建立哈夫曼树，并将它存于文件hfmtree中。
(2)C:编码 (Coding)。利用已建好的哈夫曼树(如不在内存，则从文件hfmtree中读入)，对文件tobetrans中的正文进行编码，然后将结果存入文件codefile中。
(3)D:解码(Decoding)。利用已建好的哈夫曼树将文件codefile中的代码进行译码，结果存入文件textfile中。
(4)P:打印代码文件 (Print)。将文件codefile以紧凑格式显示在终端上，每行50个代码。同时将此字符形式的编码文件写入文件codeprint中。
(5)T:打印哈夫曼树 (Tree printing)。将已在内存中的哈夫曼树以直观的方式 (树或凹入表形式)显示在终端上，同时将此字符形式的哈夫曼树写入文件treeprint中。

[实现提示]
可以根据题目要求把程序划成5个模块，设计成菜单方式，每次执行一个模块后返回菜单。
除了初始化(I)过程外，在每次执行时都经过一次读取磁盘文件数据。这是因为如果在程序执行后一直没有进行初始化(I)过程，为了能使后面的操作顺利进行，可以通过读取旧的数据来进行工作。比如：如果程序的工作需要的字符集和权值数据是固定的，只要在安装程序时进行一次初始(I)化操作就可以了。再次运行程序时，不管进行哪项操作都可以把需要的数据读入到内存。

[算法分析]
本程序主要用到了三个算法。
(1)哈夫曼编码
在初始化(I)的过程中间，要用输入的字符和权值建立哈夫曼树并求得哈夫曼编码。先将输入的字符和权值存放到一个结构体数组中，建立哈夫曼树，将计算所得的哈夫曼编码存储到另一个结构体数组中。
(2)串的匹配
在编码(D)的过程中间，要对已经编码过的代码译码，可利用循环，将代码中的与哈夫曼编码的长度相同的串与这个哈夫曼编码比较，如果相等就回显并存入文件。
(3)二叉树的遍历
在打印哈夫曼树(T)的过程中，因为哈夫曼树也是二叉树，所以就要利用二叉树的先序遍历将哈夫曼树输出。

[测试数据]
根据实验要求，在tobetrans.dat中输入"THIS PROGRAM IS MY FAVORITE"，字符集和其频度如表1所示。
表1字符集频度表
字符	__	A	B	C	D	E	F	G	H	I	J	K	L	M
频度	186	64	23	22	32	103	21	15	47	57	1	5	32	20
字符	N	O	P	Q	R	S	T	U	V	W	X	Y	Z	
频度	20	56	19	2	50	51	55	30	10	11	2	21	2	

哈夫曼编码的动画显示，程序运行界面如下： 


在上面文本框中输入待编码的字符串，点击“Show Huffman Tree”按钮输入，生成哈夫曼树并显示该字符串的哈夫曼编码。如下图所示：


在下面文本框中输入二进制哈夫曼串，点击“Decode Text”，能够还原为原来的字符。比如输入"001" 显示 "w"，输入"01001" 显示 "ow"，如下图所示：




题目2. 24点扑克牌游戏
题目背景：
一副牌中抽去大小王剩下52张（如果初练也可只用1～10这40张牌），任意抽取4张牌（称牌组），用加、减、乘、除（可加括号）把牌面上的数算成24。每张牌必须用一次且只能用一次，如抽出的牌是3、8、8、9，那么算式为（9-8）×8×3或3×8+（9-8）或（9- 8÷8）×3等。
本题主要考查栈、集合、数组、递归、穷举等知识。可参考：
http://baike.baidu.com/link?url=2KyoNLQJM9hd_KrFOTSNbwoNbbsM854nWlYHKe7qK61YSiUZYeAsj0RVoqsu81MteLCviY4Tf8CCXHG5nWftTK
http://bbs.csdn.net/topics/390499220
http://blog.sina.com.cn/s/blog_5f3e269a0100dm5a.html
http://www.docin.com/p-364720041.html
版本1(30分)：
从52张牌中任意选取4张扑克牌，如下图，每张牌表示一个数字

输入由四张被选择的扑克牌牌面的四个数字构成的一个表达式10*(8-6)+4，如下图

点击验证按钮，显示消息：

如输入的表达式为10+8+6-4，得不到正确的结果，显示消息：

如输入的数据与纸牌数据不同，显示消息：

点击刷新按钮，得到另外4张牌。

版本2(40分)：
改进版本1，如果解存在，就显示该解。

如果存在多个解，显示这样的多个解。如8，6，2，1，可能的解有：6+(8+1)*2，8*(6-2-1)，……
如果不存在解，显示无解消息。

由用户输入1到13之间的4个数，检查是否有解。
 

版本3(30分)
从52张牌中选择4张牌，这4张牌可能无解。
从52张牌中选择4张牌的挑选次数是多少？
在这些所有可能的选择中，有多少有解？
成功的几率是多少？
编程求解上述问题。


题目3. 16枚硬币的反面问题
题目背景：
教材中的9枚硬币问题使用的是3*3的矩阵，假设在一个4*4的矩阵中放置了16枚硬币。该问题可进一步变化为如2*3，2*4，3*4等等任意结构的情形。
本题主要考查对图的结构和图的广度优先遍历操作的掌握。
版本1（30分）
参考9枚硬币反面问题的模型，建立16枚硬币反面问题的模型，以及其他结构的模型。

版本2（40分）
参考9枚硬币反面问题的解决方法，解决16枚硬币的反面问题。

进一步解决其它结构的反面问题。

版本3（30分）
修改硬币翻转规则，如规则改为对角线上的邻居被翻转，或者任意自定义的翻转规则。重新解决上述问题。


题目4. 线性表、树、图的操作和演示
版本1（40分）
实现接口MyList、抽象类MyAbstractList、基于顺序存储线性表MyArrayList、基于链式存储的线性表MyLinkedList。实现方式如下：

给出MyArrayList和MyLinkedList操作的动画演示，如下图：

实现栈MyStack和队列MyQueue。实现方式如下：





给出MyStack和MyQueue的动画操作，如下图：


版本2（30分）
设计实现二叉查找树，并以动画形式演示在其上的插入、查找、删除等操作。


版本3（30分）
设计实现接口Graph、抽象类AbstractGraph、具体类UnweightedGraph和WeightedGraph类。实现方式如下：

并用动画方式显示无权图的深度优先遍历、广度优先遍历；

使用动画方式显示带权图的最小生成树、最短路径：


题目5. 农夫过河问题的求解
[问题描述]
一个农夫带着—只狼、一只羊和—棵白菜，身处河的南岸。他要把这些东西全部运到北岸。他面前只有一条小船，船只能容下他和—件物品，另外只有农夫才能撑船。如果农夫在场，则狼不能吃羊，羊不能吃白菜，否则狼会吃羊，羊会吃白菜，所以农夫不能留下羊和白菜自己离开，也不能留下狼和羊自己离开，而狼不吃白菜。请求出农夫将所有的东西运过河的方案。
[数据结构设计]
求解这个问题的简单方法是—步—步进行试探，每—步搜索所有可能的选择，对前一步合适的选择再考虑下一步的各种方案。
要模拟农夫过河问题，首先需要对问题中每个角色的位置进行描述。一个很方便的办法是用4位二进制数顺序分别表示农夫、狼、白菜和羊的位置。用0表示农夫或者某东西在河的南岸，1表示在河的北岸。例如整数5(其二制表示为0101)表示农夫和白菜在河的南岸，而狼和羊在北岸。
现在问题变成：从初的状态二进制0000(全部在河的南岸)出发，寻找一种全部由安全状态构成的状态序列，它以二进制1111（全部到达河的北岸）为最终目标，并且在序列中的每一个状态都可以从前一状态到达。为避免瞎费功夫，要求在序列中不出现重复的状态。
实现上述求解的搜索过程可以采用两种不同的策略：一种广度优先搜索，另一种深度优先搜索。这里介绍在广度优先搜索方法中采用的数据结构设计。
广度优先就是在搜索过程中总是首先搜索下面一步的所有可能状态，再进一步考虑更后面的各种情况。要实现广度优先搜索，可以使用队列。把下一步所有可能的状态都列举出来，放在队列中，再顺序取出来分别进行处理，处理过程中把再下一步的状态放在队列里……，由于队列的操作遵循先进先出的原则，在这个处理过程中，只有在前一步的所有情况都处理完后，才能开始后面一步各种情况的处理。这样，具体算法中就需要用一个整数队列moveTo，它的每个元素表示—个可以安全到达的中间状态。另外还需要一个数据结构记录已被访问过的各个状态，以及己被发现的能够到达当前这个状态的路径。由于在这个问题的解决过程中需要列举的所有状态(二进制0000到1111)一共16种，所以可以构造一个包含16个元素的整数顺序表来实现。顺序表的第i个元素记录状态i是否已被访问过，若已被访问过则在这个顺序表元素中记入前驱状态值，把这个顺序表叫做route。route的每个分量初始值为-1。route的一个元素具有非负值表示这个状态已访问过，或是正被考虑。最后可以利用route顺序表元素的值建立起正确的状态路径。于是得到农夫过河问题的广度优先算法。
在具体应用时，采用链队和顺序队均可，为叙述的方便，不妨设为使用顺序队。
[功能(函数)设计]
(1)确定农夫、狼、羊和白菜位置的功能模块。
用整数locate表示上—述4位二进制描述的状态，由于采用4位二进制的形式表示农夫、狼、白菜和羊，所以要使用位操作的“与”操作来考察每个角色所在位置的代码是0还是1。函数返回值为真表示所考察的角色在河的北岸，否则在北岸。例如某个状态和1000做“与”操作后所得结果为0，则说明农夫的位置上的二进制数为0，即农夫在南岸，如果所得结果为1，则说明农夫的位置上的二进制数为1，即农夫在北岸。狼、羊和白菜的处理办法以此类推。
(2)确定安全状态的功能模块。
此功能模块通过位置分布的代码来判断当前状态是否安全。若状态安全返回1，状态不安全返回0。
(3)将各个安全状态还原成友好的提示信息的功能模块。
由于程序中route表中最终存放的是整型的数据，如果原样输出不利于最终用户理解问题的解决方案，所以要把各个整数按照4位二进制的各个位置上的0、1代码所表示的含义输出成容易理解的文字。
[界面设计]  
如果能力和时间允许，可以使用动画设计将运送的过程演示出来。—般情况下可以使用最终的状态表描述出来就可以了。
[运行与测试]
使用状态表，程序应在屏幕上得到如下表所示的结果。
步骤	状态
	南岸	北岸
0	农夫 狼 羊 白菜	
1	狼 白菜	农夫 羊
2	狼	农夫 白菜 羊
3	农夫 狼 羊	白菜
4	羊	农夫 狼 白菜
5	农夫 羊	狼 白菜
6		农夫 狼 羊 白菜


题目6. 迷宫问题
[问题描述]
以一个m*n的长方阵表示迷宫，0和1分别表示迷宫中的通路和障碍。设计一个程序，对任意设定的迷宫，求出一条从入口到出口的通路，或得出没有通路的结论。
[基本要求]
（1）实现一个以链表作存储结构的栈类型，然后编写一个求解迷宫的非递归程序。求得的通路以三元组（i,j,d）的形式输出，其中：（i,j）指示迷宫中的一个坐标，d表示走到下一坐标的方向。
（2）编写递归形式的算法，求得迷宫中所有可能的通路；
（3）以方阵形式输出迷宫及其通路。（选做）
[测试数据]
迷宫的测试数据如下：左上角（1，1）为入口，右下角（9，8）为出口。
                 1     2      3     4     5     6      7     8
0	0	1	0	0	0	1	0
0	0	1	0	0	0	1	0
0	0	0	0	1	1	0	1
0	1	1	1	0	0	1	0
0	0	0	1	0	0	0	0
0	1	0	0	0	1	0	1
0	1	1	1	1	0	0	1
1	1	0	0	0	1	0	1
1	1	0	0	0	0	0	0
[实现提示]
计算机解迷宫通常用的是“穷举求解”方法，即从入口出发，顺着某一个方向进行探索，若能走通，则继续往前进；否则沿着原路退回，换一个方向继续探索，直至出口位置，求得一条通路。假如所有可能的通路都探索到而未能到达出口，则所设定的迷宫没有通路。
可以二维数组存储迷宫数据，通常设定入口点的下标为（1，1），出口点的下标为（m,n）。为处理方便起见，可在迷宫的四周加一圈障碍。对于迷宫中任一位置，均可约定有东、南、西、北四个方向可通。
图形界面实现可参见下图。
 


